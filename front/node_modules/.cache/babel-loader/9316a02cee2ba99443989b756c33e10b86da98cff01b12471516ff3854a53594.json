{"ast":null,"code":"// serviceWorkerRegistration.js\n// Este código irá registrar o Service Worker quando o app for executado em produção\n\n// Verifica se o browser suporta Service Worker\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname === '127.0.0.1');\nexport function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n    if (isLocalhost) {\n      // Em localhost, podemos verificar se há um service worker instalado\n      checkValidServiceWorker(swUrl);\n    } else {\n      // Registra o Service Worker em produção\n      registerValidSW(swUrl);\n    }\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    console.log('Service Worker registrado: ', registration);\n  }).catch(error => {\n    console.error('Falha ao registrar o Service Worker: ', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl) {\n  // Verifique se o service worker pode ser encontrado.\n  fetch(swUrl).then(response => {\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // Se não houver um SW válido, desregistre-o\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    } else {\n      // Se houver um SW válido, registre-o\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('Nenhum serviço de rede encontrado. Seu aplicativo funciona offline.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","register","process","env","NODE_ENV","navigator","swUrl","PUBLIC_URL","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","message"],"sources":["C:/Users/andre/OneDrive/Área de Trabalho/app daffi/app-DAFFI/front/src/serviceWorkerRegistration.js"],"sourcesContent":["// serviceWorkerRegistration.js\r\n// Este código irá registrar o Service Worker quando o app for executado em produção\r\n\r\n// Verifica se o browser suporta Service Worker\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname === '127.0.0.1'\r\n  );\r\n  \r\n  export function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n      if (isLocalhost) {\r\n        // Em localhost, podemos verificar se há um service worker instalado\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Registra o Service Worker em produção\r\n        registerValidSW(swUrl);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        console.log('Service Worker registrado: ', registration);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Falha ao registrar o Service Worker: ', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Verifique se o service worker pode ser encontrado.\r\n    fetch(swUrl)\r\n      .then((response) => {\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // Se não houver um SW válido, desregistre-o\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n          });\r\n        } else {\r\n          // Se houver um SW válido, registre-o\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'Nenhum serviço de rede encontrado. Seu aplicativo funciona offline.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }"],"mappings":"AAAA;AACA;;AAEA;AACA,MAAMA,WAAW,GAAGC,OAAO,CACvBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IACtCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,IACpCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WACjC,CAAC;AAED,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,eAAe,IAAIC,SAAS,EAAE;IACzE,MAAMC,KAAK,GAAG,GAAGJ,OAAO,CAACC,GAAG,CAACI,UAAU,oBAAoB;IAE3D,IAAIX,WAAW,EAAE;MACf;MACAY,uBAAuB,CAACF,KAAK,CAAC;IAChC,CAAC,MAAM;MACL;MACAG,eAAe,CAACH,KAAK,CAAC;IACxB;EACF;AACF;AAEA,SAASG,eAAeA,CAACH,KAAK,EAAE;EAC9BD,SAAS,CAACK,aAAa,CACpBT,QAAQ,CAACK,KAAK,CAAC,CACfK,IAAI,CAAEC,YAAY,IAAK;IACtBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,YAAY,CAAC;EAC1D,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;IAChBH,OAAO,CAACG,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;EAC/D,CAAC,CAAC;AACN;AAEA,SAASR,uBAAuBA,CAACF,KAAK,EAAE;EACtC;EACAW,KAAK,CAACX,KAAK,CAAC,CACTK,IAAI,CAAEO,QAAQ,IAAK;IAClB,IACEA,QAAQ,CAACC,MAAM,KAAK,GAAG,IACvBD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EACjE;MACA;MACAjB,SAAS,CAACK,aAAa,CAACa,KAAK,CAACZ,IAAI,CAAEC,YAAY,IAAK;QACnDA,YAAY,CAACY,UAAU,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAf,eAAe,CAACH,KAAK,CAAC;IACxB;EACF,CAAC,CAAC,CACDS,KAAK,CAAC,MAAM;IACXF,OAAO,CAACC,GAAG,CACT,qEACF,CAAC;EACH,CAAC,CAAC;AACN;AAEA,OAAO,SAASU,UAAUA,CAAA,EAAG;EAC3B,IAAI,eAAe,IAAInB,SAAS,EAAE;IAChCA,SAAS,CAACK,aAAa,CAACa,KAAK,CAC1BZ,IAAI,CAAEC,YAAY,IAAK;MACtBA,YAAY,CAACY,UAAU,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDT,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAACA,KAAK,CAACS,OAAO,CAAC;IAC9B,CAAC,CAAC;EACN;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}